"""
Email Sender for Group Results
"""
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import os
from syncanddine import create_app, db
from syncanddine.models.user import Group
from syncanddine.models.restaurant import RestaurantLike
from syncanddine.restaurants.places_service import GooglePlacesService

def format_restaurant_results_html(group):
    """Format restaurant results as HTML email"""
    if not group.preselected_restaurants:
        return "<p>No restaurants were preselected for this group.</p>"
    
    # Get all group members' likes
    group_likes = RestaurantLike.query.filter_by(group_id=group.id, liked=True).all()
    
    # Count votes for each restaurant
    restaurant_votes = {}
    for like in group_likes:
        if like.restaurant_google_id not in restaurant_votes:
            restaurant_votes[like.restaurant_google_id] = 0
        restaurant_votes[like.restaurant_google_id] += 1
    
    # Get restaurant details
    places_service = GooglePlacesService()
    preselected_ids = group.get_preselected_restaurants()
    
    results = []
    for restaurant_id in preselected_ids:
        votes = restaurant_votes.get(restaurant_id, 0)
        try:
            details = places_service.get_restaurant_details(restaurant_id)
            if details:
                results.append({
                    'restaurant': details,
                    'votes': votes,
                    'percentage': round((votes / group.members.count()) * 100) if group.members.count() > 0 else 0
                })
        except:
            continue
    
    # Sort by votes (highest first)
    results.sort(key=lambda x: x['votes'], reverse=True)
    
    # Build HTML
    html = f"""
    <html>
    <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #FF6B35;">🍽️ {group.name} - Restaurant Selection Results</h2>
        
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <p><strong>📊 Total Members:</strong> {group.members.count()}</p>
            <p><strong>⏰ Selection Period Ended:</strong> {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}</p>
        </div>
    """
    
    if not results:
        html += """
        <div style="background: #fff3cd; padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107;">
            <p><strong>❌ No restaurants were selected by group members.</strong></p>
            <p>💡 <em>Suggestion:</em> Try creating a new selection with different restaurant options!</p>
        </div>
        """
    else:
        # Top picks
        top_picks = [r for r in results if r['votes'] > 0]
        if top_picks:
            html += "<h3 style='color: #28a745;'>🏆 TOP PICKS:</h3>"
            for i, result in enumerate(top_picks[:3], 1):
                restaurant = result['restaurant']
                html += f"""
                <div style="background: white; padding: 15px; margin: 10px 0; border-radius: 8px; border: 1px solid #dee2e6;">
                    <h4 style="margin: 0 0 10px 0; color: #333;">{i}. {restaurant['name']}</h4>
                    <p style="margin: 5px 0; color: #28a745; font-weight: bold;">{result['votes']} votes ({result['percentage']}%)</p>
                    <p style="margin: 5px 0;"><strong>📍 Location:</strong> {restaurant['location']}</p>
                    <p style="margin: 5px 0;"><strong>⭐ Rating:</strong> {restaurant['rating']}/5 | <strong>💰 Price:</strong> {restaurant.get('price_range', '$$')}</p>
                """
                if restaurant.get('phone'):
                    html += f"<p style='margin: 5px 0;'><strong>📞 Phone:</strong> {restaurant['phone']}</p>"
                
                booking_url = f"https://www.google.com/search?q={restaurant['name'].replace(' ', '+')}+restaurant+booking"
                html += f"<p style='margin: 5px 0;'><a href='{booking_url}' style='color: #FF6B35;'>🔗 Find Booking Options</a></p>"
                html += "</div>"
        
        # All options
        html += "<h3 style='color: #6c757d;'>📋 ALL OPTIONS:</h3>"
        html += "<ol>"
        for result in results:
            restaurant = result['restaurant']
            votes_text = f"({result['votes']} votes)" if result['votes'] > 0 else "(0 votes)"
            html += f"<li style='margin: 5px 0;'>{restaurant['name']} <span style='color: #6c757d;'>{votes_text}</span></li>"
        html += "</ol>"
    
    html += """
        <div style="background: #d4edda; padding: 15px; border-radius: 8px; margin: 20px 0; text-align: center;">
            <h3 style="color: #155724; margin: 0;">🎉 Happy Dining!</h3>
            <p style="margin: 10px 0 0 0; color: #155724;">Generated by SyncAndDine App</p>
        </div>
    </body>
    </html>
    """
    
    return html

def send_email(to_email, subject, html_content):
    """Send HTML email using SMTP"""
    # Email configuration from environment variables
    SMTP_SERVER = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
    SMTP_PORT = int(os.getenv('SMTP_PORT', '587'))
    EMAIL_USER = os.getenv('EMAIL_USER')
    EMAIL_PASS = os.getenv('EMAIL_PASS')
    
    if not EMAIL_USER or not EMAIL_PASS:
        print("Email credentials not configured. Set EMAIL_USER and EMAIL_PASS environment variables.")
        print("For Gmail: Enable 2FA first, then generate App Password")
        return False
    
    try:
        # Create message
        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = EMAIL_USER
        msg['To'] = to_email
        
        # Add HTML content
        html_part = MIMEText(html_content, 'html')
        msg.attach(html_part)
        
        # Send email
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_USER, EMAIL_PASS)
        server.send_message(msg)
        server.quit()
        
        return True
    except Exception as e:
        print(f"Failed to send email: {str(e)}")
        return False

def process_expired_groups():
    """Process all expired groups and send email results"""
    app = create_app()
    with app.app_context():
        # Find expired groups that haven't sent results yet
        expired_groups = Group.query.filter(
            Group.selection_deadline < datetime.utcnow(),
            Group.results_sent == False,
            Group.result_email.isnot(None)
        ).all()
        
        print(f"Found {len(expired_groups)} expired groups to process")
        
        for group in expired_groups:
            try:
                # Format results
                html_content = format_restaurant_results_html(group)
                subject = f"🍽️ {group.name} - Restaurant Selection Results"
                
                # Send email
                success = send_email(group.result_email, subject, html_content)
                
                if success:
                    # Mark as sent
                    group.results_sent = True
                    db.session.commit()
                    print(f"✅ Results sent for group: {group.name}")
                else:
                    print(f"❌ Failed to send results for group: {group.name}")
                    
            except Exception as e:
                print(f"❌ Error processing group {group.name}: {str(e)}")
                continue

if __name__ == '__main__':
    # This would typically be run as a cron job every few minutes
    process_expired_groups()